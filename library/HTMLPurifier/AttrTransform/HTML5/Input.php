<?php

/**
 * Performs miscellaneous cross attribute validation and filtering for
 * HTML5 input elements. This is meant to be a post-transform.
 */
class HTMLPurifier_AttrTransform_HTML5_Input extends HTMLPurifier_AttrTransform
{
    /**
     * Allowed attributes vs input type lookup, based on https://validator.nu/
     * Generated by maintenance/generate-input-allowed.php script
     * @var array
     */
    protected static $allowed = array(
        'accept' => array(
            'file' => true,
        ),
        'alt' => array(
            'image' => true,
        ),
        'autocomplete' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'range' => true,
            'color' => true,
        ),
        'checked' => array(
            'checkbox' => true,
            'radio' => true,
        ),
        'dirname' => array(
            'text' => true,
            'search' => true,
        ),
        'formaction' => array(
            'submit' => true,
            'image' => true,
        ),
        'formenctype' => array(
            'submit' => true,
            'image' => true,
        ),
        'formmethod' => array(
            'submit' => true,
            'image' => true,
        ),
        'formnovalidate' => array(
            'submit' => true,
            'image' => true,
        ),
        'formtarget' => array(
            'submit' => true,
            'image' => true,
        ),
        'height' => array(
            'image' => true,
        ),
        'list' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'range' => true,
            'color' => true,
        ),
        'max' => array(
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'range' => true,
        ),
        'maxlength' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
        ),
        'min' => array(
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'range' => true,
        ),
        'multiple' => array(
            'email' => true,
            'file' => true,
        ),
        'pattern' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
        ),
        'placeholder' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
            'number' => true,
        ),
        'readonly' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
        ),
        'required' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'checkbox' => true,
            'radio' => true,
            'file' => true,
        ),
        'size' => array(
            'text' => true,
            'search' => true,
            'url' => true,
            'tel' => true,
            'email' => true,
            'password' => true,
        ),
        'src' => array(
            'image' => true,
        ),
        'step' => array(
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'range' => true,
        ),
        'value' => array(
            'hidden' => true,
            'text' => true,
            'search' => true,
            'tel' => true,
            'url' => true,
            'email' => true,
            'password' => true,
            'date' => true,
            'month' => true,
            'week' => true,
            'time' => true,
            'datetime-local' => true,
            'number' => true,
            'range' => true,
            'color' => true,
            'checkbox' => true,
            'radio' => true,
            'submit' => true,
            'reset' => true,
            'button' => true,
        ),
        'width' => array(
            'image' => true,
        ),
    );

    /**
     * @var HTMLPurifier_AttrDef[]
     */
    protected static $validators;

    public function __construct()
    {
        if (!self::$validators) {
            self::$validators = array(
                'datetime-local' => new HTMLPurifier_AttrDef_HTML5_Datetime('DatetimeLocal'),
                'week'   => new HTMLPurifier_AttrDef_HTML5_Week(),
                'month'  => new HTMLPurifier_AttrDef_HTML5_Datetime('Month'),
                'date'   => new HTMLPurifier_AttrDef_HTML5_Datetime('Date'),
                'time'   => new HTMLPurifier_AttrDef_HTML5_Datetime('Time'),
                'range'  => new HTMLPurifier_AttrDef_HTML5_Float(),
                'number' => new HTMLPurifier_AttrDef_HTML5_Float(),
                'color'  => new HTMLPurifier_AttrDef_HTML_Color(),
                'url'    => new HTMLPurifier_AttrDef_HTML5_AbsoluteURI(),
                // 'email' => TODO
            );
        }
    }

    /**
     * @param array $attr
     * @param HTMLPurifier_Config $config
     * @param HTMLPurifier_Context $context
     * @return array|bool
     */
    public function transform($attr, $config, $context)
    {
        if (!isset($attr['type'])) {
            $t = 'text';
        } else {
            $t = strtolower($attr['type']);
        }

        // Type failed validation based on Attr.AllowedInputTypes - the element has to be removed
        if ($t === false) {
            return false;
        }

        $attr['type'] = $t;

        // For historical reasons, the name isindex is not allowed
        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-name
        if (isset($attr['name']) && $attr['name'] === 'isindex') {
            unset($attr['name']);
        }

        // Non-empty 'alt' attribute is required for 'image' input
        if ($t === 'image' && !isset($attr['alt'])) {
            $alt = trim($config->get('Attr.DefaultImageAlt'));
            if ($alt === '') {
                $name = isset($attr['name']) ? trim($attr['name']) : '';
                $alt = $name !== '' ? $name : 'image';
            }
            $attr['alt'] = $alt;
        }

        foreach (self::$allowed as $a => $types) {
            if (isset($attr[$a]) && !isset($types[$t])) {
                unset($attr[$a]);
            }
        }

        if (isset($attr['value']) && $this->validate($t, $config, $context, $attr['value']) === false) {
            unset($attr['value']);
        }

        if (isset($attr['min']) && $this->validate($t, $config, $context, $attr['min']) === false) {
            unset($attr['min']);
        }

        if (isset($attr['max']) && $this->validate($t, $config, $context, $attr['max']) === false) {
            unset($attr['max']);
        }

        // The value attribute is always optional, though should be considered mandatory
        // for checkbox, radio, and hidden.
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-value
        if (!isset($attr['value']) && ($t === 'checkbox' || $t === 'radio' || $t === 'hidden')) {
            $attr['value'] = '';
        }

        return $attr;
    }

    /**
     * @param string $type
     * @param HTMLPurifier_Config $config
     * @param HTMLPurifier_Context $context
     * @param mixed $value
     * @return mixed
     */
    protected function validate($type, HTMLPurifier_Config $config, HTMLPurifier_Context $context, $value)
    {
        $validator = isset(self::$validators[$type]) ? self::$validators[$type] : null;
        if (!$validator) {
            return true;
        }
        if (($validated = $validator->validate($value, $config, $context)) === true) {
            return $value;
        }
        return $validated;
    }
}
